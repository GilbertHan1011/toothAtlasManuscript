{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "67c27cf0-3802-4600-b905-9539df5afa08",
   "metadata": {},
   "source": [
    "# Hypertune: grid hypertune"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7ac427e-ef7c-4f75-9bdc-5abfc498a812",
   "metadata": {},
   "source": [
    "The number of highly variable gene (HVG) and latent number is very important for scANVI algrithm. Therefore, we using [grid search](https://www.dremio.com/wiki/grid-search/) For hyper-parameter tuning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b23ea5ba-fd3e-4930-bf32-d7c6111a0a61",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:root:In order to use the mouse gastrulation seqFISH datsets, please install squidpy (see https://github.com/scverse/squidpy).\n",
      "2024-10-18 16:14:16.478401: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 AVX512F FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2024-10-18 16:14:17.204707: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n",
      "INFO:pytorch_lightning.utilities.seed:Global seed set to 0\n",
      "/home/gilberthan/anaconda3/envs/scarches/lib/python3.8/site-packages/pytorch_lightning/utilities/warnings.py:53: LightningDeprecationWarning: pytorch_lightning.utilities.warnings.rank_zero_deprecation has been deprecated in v1.6 and will be removed in v1.8. Use the equivalent function from the pytorch_lightning.utilities.rank_zero module instead.\n",
      "  new_rank_zero_deprecation(\n",
      "/home/gilberthan/anaconda3/envs/scarches/lib/python3.8/site-packages/pytorch_lightning/utilities/warnings.py:58: LightningDeprecationWarning: The `pytorch_lightning.loggers.base.rank_zero_experiment` is deprecated in v1.7 and will be removed in v1.9. Please use `pytorch_lightning.loggers.logger.rank_zero_experiment` instead.\n",
      "  return new_rank_zero_deprecation(*args, **kwargs)\n",
      "WARNING:root:In order to use sagenet models, please install pytorch geometric (see https://pytorch-geometric.readthedocs.io) and \n",
      " captum (see https://github.com/pytorch/captum).\n",
      "WARNING:root:mvTCR is not installed. To use mvTCR models, please install it first using \"pip install mvtcr\"\n",
      "WARNING:root:multigrate is not installed. To use multigrate models, please install it first using \"pip install multigrate\".\n"
     ]
    }
   ],
   "source": [
    "import scanpy as sc\n",
    "import torch\n",
    "import scarches as sca\n",
    "from scarches.dataset.trvae.data_handling import remove_sparsity\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import argparse\n",
    "import anndata\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a246ae1-f9df-4c07-bdd8-451d77be1f97",
   "metadata": {},
   "source": [
    "We use a subset of the whole datasets for speeding up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b069d9ae-dfd1-4ec4-ae3c-5cf65683b5bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "adata_whole=sc.read(\"../../process/pre-intergration/big_data/20241008_core_pp_log1p_half_gene_small_whole.h5ad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c9d6c5c-5372-40ba-98f4-b9e9bafc53cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 50766 × 19640\n",
       "    obs: 'Age', 'Core_datasets', 'Cre', 'Data Source', 'Data location', 'Development stage', 'Disease', 'Dissociation_enzyme', 'FACs', 'Gene Type', 'Histology', 'Journal', 'Knownout_gene', 'Machine', 'Mandibular_Maxillary', 'Molar_Incisor', 'Project', 'Related assay', 'Sample', 'Sex', 'Species', 'Stage', 'Strain', 'Tooth position', 'Treatment', 'coarse_anno_1', 'compl', 'log10_total_counts', 'log1p_n_genes_by_counts', 'log1p_total_counts', 'mito_frac', 'nCount_RNA', 'nFeature_RNA', 'n_genes_by_counts', 'n_genes_detected', 'orig.ident', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'pct_counts_in_top_50_genes', 'ribo_frac', 'size_factors', 'total_counts'\n",
       "    var: 'gene_symbol', 'gene_symbols', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection'\n",
       "    uns: 'X_name', 'hvg', 'log1p'\n",
       "    layers: 'counts'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata_whole"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e4190b3-fe18-49c6-9f70-50e743618825",
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_key = \"Sample\"\n",
    "labels_key = \"coarse_anno_1\"\n",
    "unlabeled_category = \"Unlabeled\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aac7bed5-e53a-4aa5-8b09-e8baeb443737",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CGATCGGTACATCGGTTCGACATGGCT_3_8    Epithelium\n",
       "TGGTACATCTGATGGT-1_2_1                 Immune\n",
       "CTCTCAGTCAACTTTC-1_3_3             Mesenchyme\n",
       "ATAGACCAGGAGAATG.2_16              Mesenchyme\n",
       "GTCTACCCATGTAACC-1_2_1                 Immune\n",
       "                                      ...    \n",
       "ACCACAATCGCAGTCG.3_16              Epithelium\n",
       "GGTCACGTCGCGCCAA-1_3_1             Mesenchyme\n",
       "GTTGTCCCACCATAAC-1_3_1             Mesenchyme\n",
       "AAAGGATTCTGAGAGG-1_3_3             Mesenchyme\n",
       "GACTTCCGTGCAAGAC-1_2_1             Mesenchyme\n",
       "Name: coarse_anno_1, Length: 50766, dtype: category\n",
       "Categories (8, object): ['Endothelium', 'Epithelium', 'Immune', 'Mesenchyme', 'Muscle', 'Neuron', 'Perivascular', 'RBC']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata_whole.obs[labels_key]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bf94da6-9efe-471b-9c2a-8c68776ef3b4",
   "metadata": {},
   "source": [
    "We saved the integration results in one folder, and then used [scib](https://github.com/theislab/scib)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "753f8000-3a0b-4653-8dcd-48ab1c8c2f62",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hypertune(hvg_n,nlatent):\n",
    "    sc.pp.highly_variable_genes(adata_whole, batch_key=condition_key,min_mean=0.035, flavor=\"cell_ranger\",n_top_genes=hvg_n)\n",
    "    adata = adata_whole[:,adata_whole.var.highly_variable].copy()\n",
    "    adata.X = adata.layers['counts']\n",
    "    adata.raw = adata\n",
    "    raw = adata.raw.to_adata()\n",
    "    raw.X = adata.layers['counts']\n",
    "    adata.raw = raw\n",
    "    sca.models.SCVI.setup_anndata(adata, batch_key=condition_key, labels_key=labels_key)\n",
    "    vae = sca.models.SCVI(\n",
    "        adata,\n",
    "        n_latent=nlatent,\n",
    "        encode_covariates=True,\n",
    "        deeply_inject_covariates=False,\n",
    "        use_layer_norm=\"both\",\n",
    "        use_batch_norm=\"none\",\n",
    "        )\n",
    "    vae.train(max_epochs=40)\n",
    "    scanvae = sca.models.SCANVI.from_scvi_model(vae, unlabeled_category =unlabeled_category)\n",
    "    scanvae.train(max_epochs=20)\n",
    "    reference_latent = sc.AnnData(scanvae.get_latent_representation())\n",
    "    reference_latent.obs[labels_key] = adata.obs[labels_key].tolist()\n",
    "    reference_latent.obs[condition_key] = adata.obs[condition_key].tolist()\n",
    "    reference_latent.obs[\"Project\"] = adata.obs[\"Project\"].tolist()\n",
    "    sc.pp.neighbors(reference_latent, n_neighbors=8)\n",
    "    sc.tl.leiden(reference_latent)\n",
    "    sc.tl.umap(reference_latent)\n",
    "    sc.pl.umap(reference_latent,\n",
    "        color=[labels_key, condition_key],\n",
    "        frameon=False,\n",
    "        wspace=0.6,save=\"gene_{}_latent_{}_umap\".format(hvg_n, nlatent)\n",
    "        )\n",
    "    reference_latent.write(\"../../process/pre-intergration/hypertune/gene_{}_latent_{}_umap.h5ad\".format(hvg_n, nlatent))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8fbe98c6-0854-4b89-9937-bd54b094698f",
   "metadata": {},
   "outputs": [],
   "source": [
    "hyperPara=pd.read_table(\"../../data/hypertune/hyperpara\",header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17a38f4c-bd1e-4c7e-8004-d3e8ff96def0",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(19):\n",
    "    hypertune(hvg_n=hyperPara[0][i],nlatent=hyperPara[1][i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f04ec483-42d5-43ea-aa95-5d5314204e9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 50766 × 19640\n",
       "    obs: 'Age', 'Core_datasets', 'Cre', 'Data Source', 'Data location', 'Development stage', 'Disease', 'Dissociation_enzyme', 'FACs', 'Gene Type', 'Histology', 'Journal', 'Knownout_gene', 'Machine', 'Mandibular_Maxillary', 'Molar_Incisor', 'Project', 'Related assay', 'Sample', 'Sex', 'Species', 'Stage', 'Strain', 'Tooth position', 'Treatment', 'coarse_anno_1', 'compl', 'log10_total_counts', 'log1p_n_genes_by_counts', 'log1p_total_counts', 'mito_frac', 'nCount_RNA', 'nFeature_RNA', 'n_genes_by_counts', 'n_genes_detected', 'orig.ident', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'pct_counts_in_top_50_genes', 'ribo_frac', 'size_factors', 'total_counts'\n",
       "    var: 'gene_symbol', 'gene_symbols', 'n_cells', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'highly_variable_nbatches', 'highly_variable_intersection'\n",
       "    uns: 'X_name', 'hvg', 'log1p'\n",
       "    layers: 'counts'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adata_whole"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "scarcheses",
   "language": "python",
   "name": "scarcheses"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
